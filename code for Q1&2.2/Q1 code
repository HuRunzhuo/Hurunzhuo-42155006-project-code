public class ADTTree {
    //Apply for a node object
    Node n = new Node(1,2);

    Node root;//Save the root of the tree
    public static void main(String args[]){
        Node n0 = new Node(1,2);
        Node n1 = new Node(3,4);
        Node n2 = new Node(5,6);
        Node n3 = new Node(7,8);
        Node n4 = new Node(9,10);
        Node n5 = new Node(11,12);
        Node n6 = new Node(13,14);
        Node n7 = new Node(15,16);
        Node n8 = new Node(17,18);
        Node n9 = new Node(19,20);

        //Build a binary search tree
        n4.leftChild = n2;
        n4.rightChild = n7;
        n2.leftChild = n1;
        n2.rightChild = n3;
        n1.leftChild = n0;
        n7.leftChild = n6;
        n7.rightChild = n8;
        n6.leftChild = n5;
        n8.rightChild = n9;

        //Stored in single chain list
        LinkList l0 = new LinkList(n4);
        LinkList l1 = new LinkList(n2);
        LinkList l2 = new LinkList(n7);
        LinkList l3 = new LinkList(n1);
        LinkList l4 = new LinkList(n3);
        LinkList l5 = new LinkList(n6);
        LinkList l6 = new LinkList(n8);
        LinkList l7 = new LinkList(n0);
        LinkList l11 = new LinkList(n5);
        LinkList l14 = new LinkList(n9);

        //Build single linked list
        l0.next = l1;
        l1.next = l2;
        l2.next = l3;
        l3.next = l4;
        l4.next = l5;
        l5.next = l6;
        l6.next = l7;
        l7.next = l11;
        l11.next = l14;

        Node result1 = l0.findFather(1,l0);
        System.out.println(result1.value);
        Node result2 = l0.findLChild(1,l0);
        System.out.println(result2.value);
        Node result3 = l0.findFather(1,l0);
        System.out.println(result3.value);
}
}
//Linked list
class LinkList{
    Node value;
    LinkList next;

    public LinkList(Node value){
        this.value = value;
    }

    //Find the parent node, left child and right child of the corresponding index
    public Node findFather(int index, LinkList l){
        int result = 0;
        if(index % 2 == 0){
            result = index / 2 - 1;
        }else {
            result = index / 2;
        }
        LinkList ll = null;
        while(result != 0){
            ll = l.next;
            result --;
        }
        return ll.value;
    }

    public Node findLChild(int index, LinkList l){
        int result = 2 * index + 1;
        LinkList ll = null;
        while(result != 0){
            ll = l.next;
            result --;
        }
        return ll.value;
    }

    public Node findRChild(int index, LinkList l){
        int result = 2 * index + 2;
        LinkList ll = null;
        while(result != 0){
            ll = l.next;
            result --;
        }
        return ll.value;
    }
}
