2.2  Attach code

import java.util.Arrays;
 
public class Heap{
    //Reactor capacity
    int maxSize;
    //Current index
    int currentIndex;  
//Use arrays to maintain nodes in the heap
Node[] nodeArr
    public Heap()
    {
        super();
    }
    
    public Heap(int maxSize)
    {
        super();
        this.maxSize = maxSize;
        this.currentIndex = 0;
        this.nodeArr = new Node[maxSize];
    }
    
    public Node[] getNodeArr()
    {
        return nodeArr;
    }
    public void setNodeArr(Node[] nodeArr)
    {
        this.nodeArr = nodeArr;
    }
    public int getMaxSize()
    {
        return maxSize;
    }
    public void setMaxSize(int maxSize)
    {
        this.maxSize = maxSize;
    } 
    
    //insert
//1.Place the newly inserted element at the end of the queue.
//2.If the element is larger than its parent node, the two elements are interchanged. (Move up operation)
//3.Cycle through step 2 until the element has no parent node or is smaller than its parent node.
    public boolean add(int value){
        int index;
        //Parent index of current node
        if(currentIndex == 0){
            nodeArr[currentIndex++] = new Node(value);
            return true;
        }else{
            nodeArr[currentIndex++] = new Node(value);
            index = currentIndex - 1;
            //Heaping
            while(nodeArr.length > 1){
                int sData = nodeArr[index].getData();
                int pData = nodeArr[(index - 1) / 2].getData();
                if(sData > pData){
                    nodeArr[index].setData(pData);
                    nodeArr[(index - 1) / 2].setData(sData);
                }
                index = (index - 1) / 2;
                if(index == 0){
                    break;
                }
            }
        }
        return true;
    }
    
    //delete
    //1.Remove the top node
    //2.Place the element at the end of the team on the top.
//3.Compare this node with the larger one of its child nodes. If it is smaller than it, the position will be exchanged (move down operation)
//4.Cycle through step 3 until the leaf node is no longer smaller than the larger one of its child nodes.
    public boolean delete(int index){
        int length = nodeArr.length;
        nodeArr[index].setData(nodeArr[length - 1].getData());
        length = length - 1;
        nodeArr = Arrays.copyOf(nodeArr, length);
        while(length > 1){
            int pValue = nodeArr[index].getData();
            if(2*index + 1 <= length - 1 && nodeArr[2*index + 1].getData() > pValue){
                nodeArr[index].setData(nodeArr[2*index + 1].getData());
                nodeArr[2*index + 1].setData(pValue);
                index = 2*index + 1;  
            }else if(2*index + 2 <= length - 1 && nodeArr[2*index + 2].getData() > pValue){
                nodeArr[index].setData(nodeArr[2*index + 2].getData());
                nodeArr[2*index + 2].setData(pValue);
                index = 2*index + 2;
            }else{
                break;
            }
        }
        return true;
    }
 
    public String show(){
        StringBuffer buffer = new StringBuffer("{");
        for(int i = 0; i < nodeArr.length - 1; i++){
            buffer.append(i+"-"+nodeArr[i].getData()+"|");
        }
        buffer.append("}");
        buffer.substring(0, buffer.length()-1);
        return buffer.toString();
    }
}
 
class Node{
    //data
    int data;
    
    public Node()
    {
        super();
    }
    
    public Node(int data)
    {
        super();
        this.data = data;
    }
    
    public int getData()
    {
        return data;
    }
    public void setData(int data)
    {
        this.data = data;
    }
    
}
